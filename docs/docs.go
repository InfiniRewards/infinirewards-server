// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.infinirewards.io/support",
            "email": "support@infinirewards.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/authenticate": {
            "post": {
                "description": "Authenticate user using OTP or API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "Authentication Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthenticateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "schema": {
                            "$ref": "#/definitions/models.AuthenticateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many attempts",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh an existing authentication token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "description": "Token Refresh Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/request-otp": {
            "post": {
                "description": "Request a one-time password for authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request OTP",
                "parameters": [
                    {
                        "description": "OTP Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RequestOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/mint": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mint new collectible tokens for a specified recipient",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Mint collectible tokens",
                "parameters": [
                    {
                        "description": "Mint Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MintCollectibleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mint successful",
                        "schema": {
                            "$ref": "#/definitions/models.MintCollectibleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions to mint",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}": {
            "get": {
                "description": "Get detailed information about a collectible contract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Get collectible details",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collectible details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GetCollectibleDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid contract address",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Contract not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}/balance/{tokenId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get balance of collectible tokens for a specific token ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Get collectible balance",
                "parameters": [
                    {
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GetCollectibleBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Contract or token not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}/purchase": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Purchase a collectible token using points",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Purchase collectible",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Purchase details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PurchaseCollectibleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase successful",
                        "schema": {
                            "$ref": "#/definitions/models.PurchaseCollectibleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "402": {
                        "description": "Insufficient points balance",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Collectible not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "410": {
                        "description": "Collectible expired",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}/redeem": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Redeem a collectible token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Redeem collectible",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Redemption details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RedeemCollectibleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Redemption successful",
                        "schema": {
                            "$ref": "#/definitions/models.RedeemCollectibleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to redeem",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Collectible not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}/token-data/{tokenId}": {
            "get": {
                "description": "Get metadata for a collectible token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Get token data",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token data retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GetTokenDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Token data not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set metadata for a collectible token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Set token data",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Token data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SetTokenDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token data updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SetTokenDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to set token data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}/uri/{tokenId}": {
            "get": {
                "description": "Get the URI for a specific collectible token's metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Get collectible URI",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URI retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GetCollectibleURIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collectibles/{address}/valid/{tokenId}": {
            "get": {
                "description": "Check if a collectible token is valid (not expired)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectibles"
                ],
                "summary": "Check collectible validity",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validity status retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.IsCollectibleValidResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants": {
            "post": {
                "description": "Create a new merchant account with initial points contract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchants"
                ],
                "summary": "Create new merchant",
                "parameters": [
                    {
                        "description": "Merchant creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateMerchantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchant created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CreateMerchantResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Merchant already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/collectible-contracts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all collectible contracts associated with a merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchants"
                ],
                "summary": "Get merchant's collectible contracts",
                "responses": {
                    "200": {
                        "description": "List of collectible contracts",
                        "schema": {
                            "$ref": "#/definitions/models.GetCollectibleContractsResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not a merchant account",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/collectibles": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new collectible contract for a merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchants"
                ],
                "summary": "Create collectible contract",
                "parameters": [
                    {
                        "description": "Collectible creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCollectibleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created collectible details",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCollectibleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to create collectibles",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/points": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create an additional points contract for a merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchants"
                ],
                "summary": "Create points contract",
                "parameters": [
                    {
                        "description": "Points contract creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePointsContractRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created points contract details",
                        "schema": {
                            "$ref": "#/definitions/models.CreatePointsContractResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to create points contracts",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/points-contracts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all points contracts associated with a merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchants"
                ],
                "summary": "Get merchant's points contracts",
                "responses": {
                    "200": {
                        "description": "List of points contracts",
                        "schema": {
                            "$ref": "#/definitions/models.GetPointsContractsResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not a merchant account",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/points/burn": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Burn points tokens from a merchant's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "points"
                ],
                "summary": "Burn points tokens",
                "parameters": [
                    {
                        "description": "Burn Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BurnPointsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Points burned successfully",
                        "schema": {
                            "$ref": "#/definitions/models.BurnPointsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to burn points",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/points/mint": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mint new points tokens for a specified recipient",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "points"
                ],
                "summary": "Mint points tokens",
                "parameters": [
                    {
                        "description": "Mint Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MintPointsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Points minted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MintPointsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to mint points",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/points/transfer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Transfer points from one account to another",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "points"
                ],
                "summary": "Transfer points between accounts",
                "parameters": [
                    {
                        "description": "Transfer Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TransferPointsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Points transferred successfully",
                        "schema": {
                            "$ref": "#/definitions/models.TransferPointsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not authorized to transfer points",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/points/{address}/balance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the points balance for a specific account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "points"
                ],
                "summary": "Get points balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Points contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.GetPointsBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "format": "ulid",
                        "example": "user:01HNA...",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user details",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/api-keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all API keys for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api-keys"
                ],
                "summary": "List API keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of API keys",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.APIKey"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new API key for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api-keys"
                ],
                "summary": "Create API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "API key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created API key details",
                        "schema": {
                            "$ref": "#/definitions/models.APIKey"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/api-keys/{keyId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api-keys"
                ],
                "summary": "Delete API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API Key ID",
                        "name": "keyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIKey": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.AuthenticateRequest": {
            "type": "object",
            "required": [
                "id",
                "method",
                "signature",
                "token"
            ],
            "properties": {
                "id": {
                    "description": "ID is either a verification ID (for OTP) or API key ID\nexample: 01HNAJ6640M9JRRJFQSZZVE3HH",
                    "type": "string"
                },
                "method": {
                    "description": "Method must be either \"otp\" or \"secret\"\nexample: otp",
                    "type": "string",
                    "enum": [
                        "otp",
                        "secret"
                    ]
                },
                "signature": {
                    "description": "Signature is a unique device identifier\nexample: device_signature_123",
                    "type": "string"
                },
                "token": {
                    "description": "Token is either an OTP code or API key secret\nexample: 123456",
                    "type": "string"
                }
            }
        },
        "models.AuthenticateResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.BurnPointsRequest": {
            "type": "object",
            "required": [
                "amount",
                "pointsContract"
            ],
            "properties": {
                "amount": {
                    "description": "Amount of points to burn\nexample: 50",
                    "type": "string"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                }
            }
        },
        "models.BurnPointsResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the burn transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.CollectibleContractInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the contract\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the collection\nexample: Limited collectibles",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the collectible collection\nexample: Special Edition",
                    "type": "string"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract used for purchases\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "tokenDescriptions": {
                    "description": "TokenDescriptions lists descriptions for each token\nexample: [\"Gold\",\"Silver\",\"Bronze\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tokenExpiries": {
                    "description": "TokenExpiries lists expiry timestamps for each token\nexample: [1735689600,1735689600,1735689600]",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tokenPrices": {
                    "description": "TokenPrices lists prices for each token\nexample: [\"100\",\"200\",\"300\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tokenTypes": {
                    "description": "TokenTypes lists all token IDs in the collection\nexample: [\"1\",\"2\",\"3\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "totalSupply": {
                    "description": "TotalSupply across all token types\nexample: 100",
                    "type": "string"
                }
            }
        },
        "models.CreateAPIKeyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.CreateCollectibleRequest": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description of the collectible collection\nexample: Limited edition collectibles",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "name": {
                    "description": "Name of the collectible contract\nexample: Special Edition",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "models.CreateCollectibleResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the deployed contract address\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "transactionHash": {
                    "description": "TransactionHash is the hash of the creation transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.CreateMerchantRequest": {
            "type": "object",
            "required": [
                "decimals",
                "name",
                "phoneNumber",
                "publicKey",
                "symbol"
            ],
            "properties": {
                "decimals": {
                    "description": "Decimals for the points token\nexample: 18",
                    "type": "integer",
                    "maximum": 18,
                    "minimum": 0
                },
                "name": {
                    "description": "Name of the merchant\nexample: My Store",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "phoneNumber": {
                    "description": "PhoneNumber must be in E.164 format\nexample: +60123456789",
                    "type": "string"
                },
                "publicKey": {
                    "description": "PublicKey is the merchant's public key\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "symbol": {
                    "description": "Symbol for the points token\nexample: PTS",
                    "type": "string"
                }
            }
        },
        "models.CreateMerchantResponse": {
            "type": "object",
            "properties": {
                "merchantAddress": {
                    "description": "MerchantAddress is the deployed merchant contract address\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "pointsAddress": {
                    "description": "PointsAddress is the deployed points contract address\nexample: 0x9876543210abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "transactionHash": {
                    "description": "TransactionHash is the hash of the creation transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.CreatePointsContractRequest": {
            "type": "object",
            "required": [
                "decimals",
                "description",
                "name",
                "symbol"
            ],
            "properties": {
                "decimals": {
                    "description": "Decimals specifies the number of decimal places\nexample: 18",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the points system\nexample: Premium tier loyalty points",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "name": {
                    "description": "Name of the points token\nexample: Premium Points",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "symbol": {
                    "description": "Symbol for the points token (3-4 characters)\nexample: PPT",
                    "type": "string"
                }
            }
        },
        "models.CreatePointsContractResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the deployed contract address\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "transactionHash": {
                    "description": "TransactionHash is the hash of the creation transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetCollectibleBalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance is the number of tokens owned\nexample: 100",
                    "type": "string"
                }
            }
        },
        "models.GetCollectibleContractsResponse": {
            "type": "object",
            "properties": {
                "contracts": {
                    "description": "Contracts is the list of collectible contracts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CollectibleContractInfo"
                    }
                }
            }
        },
        "models.GetCollectibleDetailsResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the collectible collection\nexample: Special Edition Collectibles",
                    "type": "string"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "tokenDescriptions": {
                    "description": "TokenDescriptions lists descriptions for each token\nexample: [\"Gold\",\"Silver\",\"Bronze\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tokenExpiries": {
                    "description": "TokenExpiries lists expiry timestamps for each token\nexample: [1735689600,1735689600,1735689600]",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tokenIDs": {
                    "description": "TokenIDs lists all token IDs in the collection\nexample: [\"1\",\"2\",\"3\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tokenPrices": {
                    "description": "TokenPrices lists prices for each token\nexample: [\"100\",\"200\",\"300\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.GetCollectibleURIResponse": {
            "type": "object",
            "properties": {
                "uri": {
                    "description": "URI of the collectible metadata\nexample: https://example.com/metadata/1",
                    "type": "string"
                }
            }
        },
        "models.GetPointsBalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance is the number of points owned\nexample: 1000",
                    "type": "string"
                }
            }
        },
        "models.GetPointsContractsResponse": {
            "type": "object",
            "properties": {
                "contracts": {
                    "description": "Contracts is the list of points contracts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PointsContractInfo"
                    }
                }
            }
        },
        "models.GetTokenDataResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the token's metadata description\nexample: Limited edition collectible",
                    "type": "string"
                },
                "expiry": {
                    "description": "Expiry is the Unix timestamp when the token expires\nexample: 1735689600",
                    "type": "integer"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract used for purchases\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "price": {
                    "description": "Price is the cost in points to purchase the token\nexample: 100",
                    "type": "string"
                }
            }
        },
        "models.IsCollectibleValidResponse": {
            "type": "object",
            "properties": {
                "isValid": {
                    "description": "IsValid indicates if the collectible is still valid\nexample: true",
                    "type": "boolean"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "message"
                }
            }
        },
        "models.MintCollectibleRequest": {
            "type": "object",
            "required": [
                "amount",
                "collectibleAddress",
                "to",
                "tokenId"
            ],
            "properties": {
                "amount": {
                    "description": "Amount is the number of tokens to mint\nexample: 1",
                    "type": "string"
                },
                "collectibleAddress": {
                    "description": "CollectibleAddress is the contract address of the collectible\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "to": {
                    "description": "To is the recipient address\nexample: 0x9876543210abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "tokenId": {
                    "description": "TokenId is the ID of the token to mint\nexample: 1",
                    "type": "string"
                }
            }
        },
        "models.MintCollectibleResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the mint transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.MintPointsRequest": {
            "type": "object",
            "required": [
                "amount",
                "pointsContract",
                "recipient"
            ],
            "properties": {
                "amount": {
                    "description": "Amount of points to mint (in smallest unit)\nexample: 100",
                    "type": "string"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "recipient": {
                    "description": "Recipient is the address receiving the points\nexample: 0x9876543210abcdef1234567890abcdef12345678",
                    "type": "string"
                }
            }
        },
        "models.MintPointsResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the mint transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.PointsContractInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the contract\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "decimals": {
                    "description": "Decimals places for the token\nexample: 18",
                    "type": "integer"
                },
                "description": {
                    "description": "Description of the points token\nexample: Loyalty points for Store XYZ",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the points token\nexample: Store Points",
                    "type": "string"
                },
                "symbol": {
                    "description": "Symbol of the points token\nexample: SP",
                    "type": "string"
                },
                "totalSupply": {
                    "description": "TotalSupply of the points token\nexample: 1000000",
                    "type": "integer"
                }
            }
        },
        "models.PurchaseCollectibleRequest": {
            "type": "object",
            "required": [
                "amount",
                "tokenId",
                "user"
            ],
            "properties": {
                "amount": {
                    "description": "Amount is the number of tokens to purchase\nexample: 1",
                    "type": "string"
                },
                "tokenId": {
                    "description": "TokenId is the ID of the token to purchase\nexample: 1",
                    "type": "string"
                },
                "user": {
                    "description": "User is the address purchasing the collectible\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                }
            }
        },
        "models.PurchaseCollectibleResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the purchase transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.RedeemCollectibleRequest": {
            "type": "object",
            "required": [
                "amount",
                "tokenId",
                "user"
            ],
            "properties": {
                "amount": {
                    "description": "Amount is the number of tokens to redeem\nexample: 1",
                    "type": "string"
                },
                "tokenId": {
                    "description": "TokenId is the ID of the token to redeem\nexample: 1",
                    "type": "string"
                },
                "user": {
                    "description": "User is the address redeeming the collectible\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                }
            }
        },
        "models.RedeemCollectibleResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the redemption transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "models.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "creds": {
                    "type": "string"
                },
                "token": {
                    "$ref": "#/definitions/models.Token"
                }
            }
        },
        "models.RequestOTPRequest": {
            "type": "object",
            "required": [
                "phoneNumber"
            ],
            "properties": {
                "phoneNumber": {
                    "description": "PhoneNumber must be in E.164 format (e.g. +60123456789)\nexample: +60123456789",
                    "type": "string"
                }
            }
        },
        "models.RequestOTPResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "phoneNumberVerification:01HNAJ6640M9JRRJFQSZZVE3HH"
                },
                "message": {
                    "type": "string",
                    "example": "message"
                }
            }
        },
        "models.SetTokenDataRequest": {
            "type": "object",
            "required": [
                "description",
                "expiry",
                "pointsContract",
                "price"
            ],
            "properties": {
                "description": {
                    "description": "Description is the token's metadata description\nexample: Limited edition collectible",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "expiry": {
                    "description": "Expiry is the Unix timestamp when the token expires\nexample: 1735689600",
                    "type": "integer"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract used for purchases\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "price": {
                    "description": "Price is the cost in points to purchase the token\nexample: 100",
                    "type": "string"
                }
            }
        },
        "models.SetTokenDataResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the set data transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.Token": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "accessTokenExpiry": {
                    "description": "RefreshToken       string    ` + "`" + `json:\"refreshToken\"` + "`" + ` (use ID as refresh token)",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "refreshTokenExpiry": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "models.TransferPointsRequest": {
            "type": "object",
            "required": [
                "amount",
                "from",
                "pointsContract",
                "to"
            ],
            "properties": {
                "amount": {
                    "description": "Amount of points to transfer\nexample: 25",
                    "type": "string"
                },
                "from": {
                    "description": "From is the sender's address\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "pointsContract": {
                    "description": "PointsContract is the address of the points contract\nexample: 0x1234567890abcdef1234567890abcdef12345678",
                    "type": "string"
                },
                "to": {
                    "description": "To is the recipient's address\nexample: 0x9876543210abcdef1234567890abcdef12345678",
                    "type": "string"
                }
            }
        },
        "models.TransferPointsResponse": {
            "type": "object",
            "properties": {
                "transactionHash": {
                    "description": "TransactionHash is the hash of the transfer transaction\nexample: 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "accountAddress": {
                    "description": "StarkNet account address",
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "nKey": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "natsPublicKey": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "privateKey": {
                    "description": "StarkNet private key",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter your bearer token in the format **Bearer \u003ctoken\u003e**",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "InfiniRewards API",
	Description:      "API for InfiniRewards - A Web3 Loyalty and Rewards Platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
